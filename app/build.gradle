/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    otel {
        canBeConsumed = false
        canBeResolved = true
    }
    testingAgent {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    otel 'io.opentelemetry.javaagent:opentelemetry-javaagent:1.32.0'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation "io.opentelemetry:opentelemetry-api:1.32.0"
    implementation "io.opentelemetry:opentelemetry-context:1.32.0"

    // Uncomment the following dependency and the explicit bucket boundary advice will work
    // runtimeOnly "io.opentelemetry:opentelemetry-sdk-extension-incubator:1.32.0-alpha"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

application {

    // Define the main class for the application.
    mainClass = 'otel.java.project.App'
    applicationDefaultJvmArgs = ["-Dotel.javaagent.debug=true", "-javaagent:${configurations.otel.singleFile.absolutePath}", "-Dotel.metric.export.interval=10000", "-Dotel.metrics.exporter=logging"]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
